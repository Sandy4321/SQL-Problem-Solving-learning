https://www.youtube.com/playlist?list=PLBTZqjSKn0IeKBQDjLmzisazhqQy4iGkb

1- How to find duplicates in a table
2- How to delete duplicates from a table
3- Difference between union and union all
4- Difference between rank,row_number and dense_rank
5- Find records in a table which are not present in another table
6- Find second highest salary employees in each department
7- Find employees with salary more than their manager's salary
8- Difference between inner and left join
9- update a table and swap gender values.
10- Number of records in output with different kinds of join.
11.  Sort a table based on gender. E.g. if gender is Male then sort in ascending order, if Female then descending order


𝘄
frequently asked question - big data interview
🟢Define Big Data and explain the Vs of Big Data?
🟢How to deploy a Big Data Model, what are key steps involved?
🟢What is Hadoop and what are its main components?
🟢Explain Lambda architecture ?
🟢What is dimensionality reduction?
🟢How does MapReduce Works?
🟢What happens internally when we submit a Spark job using Spark-Submit?
🟢What is a catalyst optimizer?
🟢Explain the working of a Zookeeper in a Big data environment?
🟢How to tune a spark job? 
🟢When would you prefer to use Hive, and when would you prefer Spark SQL?


project related
🟢Explain your project architecture?
🟢What optimization techniques have you used in your project?
🟢What is your role in your project?
🟢What is the most challenging problem you have solved in your big data project?
🟢What is the size of data you deal with on daily basis?
🟢What is the size of your Spark cluster and the configuration of each node?
🟢How do you deal with outliers?


python 
1)Filter the list for even numbers
# Initialisation of list
lis = [1,2,3,4,5]
# Output list initialisation
out = []
  
for num in lis: 
      
    # checking condition 
    if num % 2 == 0: 
        out.append(num)
    
# printing output
print(out)

#using while loop
while(num < len(lis)): 
      
    # checking condition 
    if lis[num] % 2 == 0: 
        out.append(lis[num])
    # increment num 
    num += 1

#Using filter()
is_even = lambda x: x % 2 == 0
  
# using filter
lis2 = list(filter(is_even, lis1))


2) Create a squared dictionary for first five natural numbers
# find sum of square
# of first n natural 
# numbers
  
  
# Return the sum of
# square of first n
# natural numbers
def squaresum(n) :
  
    # Iterate i from 1 
    # and n finding 
    # square of i and
    # add to sum.
    sm = 0
    for i in range(1, n+1) :
        sm = sm + (i * i)
      
    return sm
  
# Driven Program
n = 4
print(squaresum(n))

#method 2 = O(1)
def squaresum(n) :
    return (n * (n + 1) * (2 * n + 1)) // 6
	
#method(3)
#Avoiding early overflow:
#For large n, the value of (n * (n + 1) * (2 * n + 1)) would overflow. We can avoid overflow up to 
#some extent using the fact that n*(n+1) must be divisible by 2.
def squaresum(n):
    return (n * (n + 1) / 2) * (2 * n + 1) / 3
	


3) Swap two numbers without using third variable
#Method 1 :- Using simple built-in method 
left , right = right , left 

x = 5.4
y = 10.3
 
print ("Before swapping: ")
print("Value of x : ", x, " and y : ", y)
 
# Swap code
x = x * y # x = 55.62, y = 10.3
y = x / y # x = 55.62, y = 5.4
x = x / y # x = 10.3, y = 5.4
 
print ("After swapping: ")
print("Value of x : ", x, " and y : ", y)

# Swap code
x = x + y # x = 15.7, y = 10.3
y = x - y # x = 15.7, y = 5.4
x = x - y # x = 10.3, y = 5.4

# Swap code
x ^= y # x = 1111, y = 1010
y ^= x # y = 0101, x = 1111
x ^= y # x = 1010, y = 0101



4)Sort the dictionary – i)By Keys ii) By Values



5)Reverse a String in Python
Time complexity: O(n)
Auxiliary Space: O(1) 
#method 1 : Reverse string in Python using the function call
Function to reverse a string by converting string to list then reversed it and again convert it to string.
# Function to reverse a string
# by converting string to list
# then reversed it and again convert it to string
def reverse(string):
    string = list(string)
    string.reverse()
    return "".join(string)
 
s = "Geeksforgeeks"
 
print("The original string  is : ", s)
print("The reversed string(using reversed) is : ", reverse(s))

Method 2: Reverse string in Python using stack
#An empty stack is created. One by one character of the string is pushed to the stack.
#One by one all characters from the stack are popped and put back to a string.
Time complexity: O(n) 
Auxiliary Space: O(n) 

# Function to create an empty stack. It
# initializes size of stack as 0
def createStack():
    stack = []
    return stack
 
# Function to determine the size of the stack
def size(stack):
    return len(stack)
 
# Stack is empty if the size is 0
def isEmpty(stack):
    if size(stack) == 0:
        return true
 
# Function to add an item to stack . It
# increases size by 1
def push(stack, item):
    stack.append(item)
 
# Function to remove an item from stack.
# It decreases size by 1
def pop(stack):
    if isEmpty(stack):
        return
    return stack.pop()
 
# A stack based function to reverse a string
def reverse(string):
    n = len(string)
 
    # Create a empty stack
    stack = createStack()
 
    # Push all characters of string to stack
    for i in range(0, n, 1):
        push(stack, string[i])
 
    # Making the string empty since all
    # characters are saved in stack
    string = ""
 
    # Pop all characters of string and put
    # them back to string
    for i in range(0, n, 1):
        string += pop(stack)
 
    return string
 
 
# Driver code
s = "Geeksforgeeks"
print("The original string is : ", end="")
print(s)
print("The reversed string(using stack) is : ", end="")
print(reverse(s))


6)Swap key and values in a dictionary


7)Implement Armstrong number in python

8)Count the occurrences of a given character in a string

9)Compare if two array are equal in size or not
#A simple solution is to sort both arrays and then linearly compare elements. 
#Time Complexity: O(n log n) 
#Auxiliary Space: O(1)
def areEqual(arr1, arr2, n, m):
 
    # If lengths of array are not
    # equal means array are not equal
    if (n != m):
        return False
 
    # Sort both arrays
    arr1.sort()
    arr2.sort()
 
    # Linearly compare elements
    for i in range(0, n):
        if (arr1[i] != arr2[i]):
            return False
 
    # If all elements were same.
    return True
 
 
# Driver Code
arr1 = [3, 5, 2, 5, 2]
arr2 = [2, 3, 5, 5, 2]
n = len(arr1)
m = len(arr2)
 
if (areEqual(arr1, arr2, n, m)):
    print("Yes")
else:
    print("No")



10)Remove duplicate elements in a list
Method 1: Using *set() 
This is the fastest and smallest method to achieve a particular task. It first removes the duplicates and returns a 
dictionary which has to be converted to list. 
# Python 3 code to demonstrate
# removing duplicate elements from the list
l = [1, 2, 4, 2, 1, 4, 5]
print("Original List: ", l)
res = [*set(l)]
print("List after removing duplicate elements: ", res)

Method 4: Using list comprehension + enumerate() 
list comprehension coupled with enumerate function can also achieve this task. 
It basically looks for already occurred elements and skips adding them. It preserves the list ordering.  
# removing duplicated from list
# using list comprehension + enumerate() 
# initializing list
test_list = [1, 5, 3, 6, 3, 5, 6, 1]
print (" The original list is : " + str(test_list))
 
# using list comprehension + enumerate()
# to remove duplicated
# from list
res = [i for n, i in enumerate(test_list) if i not in test_list[:n]]
 
# printing list after removal
print ("The list after removing duplicates : " + str(res))